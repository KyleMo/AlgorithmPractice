{"ast":null,"code":"var _jsxFileName = \"/Users/kylemonstad/Desktop/dsa/frontend/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Problem from './components/Problem.js';\nimport mergeTwoLists from './algorithms/mergeTwoSortList';\nimport twoSums from './algorithms/twoSums.js';\nimport validParentheses from './algorithms/validParen.js';\nimport { isPalendrome, removePalindromeSub } from './algorithms/isPalendrome.js';\nimport countOfCharInString from './algorithms/stringCount.js';\nimport isValid from './algorithms/validParen.js';\nimport ListNode from './algorithms/ListNode.js';\nimport LinkedList from './algorithms/LinkedList.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst head1 = new ListNode(1);\nconst head2 = new ListNode(2);\nconst nums1 = [1, 2, 4, 5];\nconst nums2 = [1, 3, 4];\nlet curr1 = head1;\nlet curr2 = head2;\nnums1.map(num => {\n  curr1.next = new ListNode(num);\n  curr1 = curr1.next;\n});\nnums2.map(num => {\n  curr2.next = new ListNode(num);\n  curr2 = curr2.next;\n});\nlet list = mergeTwoLists(head1, head2);\n\nwhile (list !== null) {\n  console.log(list.val);\n  list = list.next;\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Data Structures and Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"problems\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: /*#__PURE__*/_jsxDEV(Problem, {\n            title: \"Two Sums\",\n            details: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.You can return the answer in any order.\",\n            input: \"Input: nums = [2,7,11,15], target = 9\",\n            expectedOutput: \"Output: [0,1]\",\n            inputPlaceholder: \"Enter an array without brackets. Ex: 1,9,5,6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Problem","mergeTwoLists","twoSums","validParentheses","isPalendrome","removePalindromeSub","countOfCharInString","isValid","ListNode","LinkedList","head1","head2","nums1","nums2","curr1","curr2","map","num","next","list","console","log","val","App"],"sources":["/Users/kylemonstad/Desktop/dsa/frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Problem from './components/Problem.js'\nimport mergeTwoLists from './algorithms/mergeTwoSortList';\nimport twoSums from './algorithms/twoSums.js'\nimport validParentheses from './algorithms/validParen.js'\nimport {isPalendrome, removePalindromeSub} from './algorithms/isPalendrome.js'\nimport countOfCharInString from './algorithms/stringCount.js'\nimport isValid from './algorithms/validParen.js';\n\nimport ListNode from './algorithms/ListNode.js'\nimport LinkedList from './algorithms/LinkedList.js'\n\n\nconst head1 = new ListNode(1)\nconst head2 = new ListNode(2)\nconst nums1 = [1,2,4,5]\nconst nums2 = [1,3,4]\n\nlet curr1 = head1\nlet curr2 = head2\n\nnums1.map((num) => {\n  curr1.next = new ListNode(num)\n  curr1 = curr1.next\n})\n\nnums2.map((num) => {\n  curr2.next = new ListNode(num)\n  curr2 = curr2.next\n})\n\nlet list = mergeTwoLists(head1, head2)\n\nwhile (list !== null){\n  console.log(list.val)\n  list = list.next\n}\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Data Structures and Algorithms</h1>\n        <div className=\"problems\">\n          <ol>\n            <Problem\n              title=\"Two Sums\"\n              details=\"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.You can return the answer in any order.\"\n              input=\"Input: nums = [2,7,11,15], target = 9\"\n              expectedOutput=\"Output: [0,1]\"\n              inputPlaceholder=\"Enter an array without brackets. Ex: 1,9,5,6\"\n              ></Problem>\n          </ol>\n\n\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,SAAQC,YAAR,EAAsBC,mBAAtB,QAAgD,8BAAhD;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;AACA,OAAOC,OAAP,MAAoB,4BAApB;AAEA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AAGA,MAAMC,KAAK,GAAG,IAAIF,QAAJ,CAAa,CAAb,CAAd;AACA,MAAMG,KAAK,GAAG,IAAIH,QAAJ,CAAa,CAAb,CAAd;AACA,MAAMI,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAd;AACA,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAd;AAEA,IAAIC,KAAK,GAAGJ,KAAZ;AACA,IAAIK,KAAK,GAAGJ,KAAZ;AAEAC,KAAK,CAACI,GAAN,CAAWC,GAAD,IAAS;EACjBH,KAAK,CAACI,IAAN,GAAa,IAAIV,QAAJ,CAAaS,GAAb,CAAb;EACAH,KAAK,GAAGA,KAAK,CAACI,IAAd;AACD,CAHD;AAKAL,KAAK,CAACG,GAAN,CAAWC,GAAD,IAAS;EACjBF,KAAK,CAACG,IAAN,GAAa,IAAIV,QAAJ,CAAaS,GAAb,CAAb;EACAF,KAAK,GAAGA,KAAK,CAACG,IAAd;AACD,CAHD;AAKA,IAAIC,IAAI,GAAGlB,aAAa,CAACS,KAAD,EAAQC,KAAR,CAAxB;;AAEA,OAAOQ,IAAI,KAAK,IAAhB,EAAqB;EACnBC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAjB;EACAH,IAAI,GAAGA,IAAI,CAACD,IAAZ;AACD;;AAMD,SAASK,GAAT,GAAe;EACb,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAQ,SAAS,EAAC,YAAlB;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,UAAf;QAAA,uBACE;UAAA,uBACE,QAAC,OAAD;YACE,KAAK,EAAC,UADR;YAEE,OAAO,EAAC,8QAFV;YAGE,KAAK,EAAC,uCAHR;YAIE,cAAc,EAAC,eAJjB;YAKE,gBAAgB,EAAC;UALnB;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD;;KAtBQA,G;AAwBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}