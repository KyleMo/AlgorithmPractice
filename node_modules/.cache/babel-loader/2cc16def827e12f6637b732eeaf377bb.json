{"ast":null,"code":"// go throgh each item in string\n// count the number of opening parens, add to dict\n// count the number \nconst isValid = string => {\n  let stack = [];\n\n  for (let i = 0; i < string.length; i++) {\n    if (isOpeningParen(string[i])) {\n      stack.push(string[i]);\n      console.log(stack);\n    }\n\n    if (isClosingParen(string[i])) {\n      if (isSameType(stack[stack.length - 1], string[i])) {\n        stack.pop();\n      } else {\n        console.log('is not same t');\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\nconst isSameType = (stackTop, endingParenType) => {\n  if (stackTop === '(' && endingParenType === ')') {\n    return true;\n  } else if (stackTop === '{' && endingParenType === '}') {\n    return true;\n  } else if (stackTop === '[' && endingParenType === ']') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isClosingParen = string => {\n  if (string === ')' || string === '}' || string === ']') {\n    return true;\n  }\n\n  return false;\n};\n\nconst isOpeningParen = string => {\n  if (string === '(' || string === '{' || string === '[') {\n    return true;\n  }\n\n  return false;\n};\n\nexport default isValid;","map":{"version":3,"names":["isValid","string","stack","i","length","isOpeningParen","push","console","log","isClosingParen","isSameType","pop","stackTop","endingParenType"],"sources":["/Users/kylemonstad/Desktop/dsa/frontend/src/algorithms/validParen.js"],"sourcesContent":["\n// go throgh each item in string\n// count the number of opening parens, add to dict\n// count the number \n\n\n\nconst isValid = (string) => {\n    let stack = []\n\n    for (let i=0; i<string.length; i++){\n\n        if (isOpeningParen(string[i])){\n            stack.push(string[i])\n            console.log(stack)\n        } \n\n        if (isClosingParen(string[i])){\n            if(isSameType(stack[stack.length-1], string[i])){\n                stack.pop()\n            } else {\n                console.log('is not same t')\n                return false\n            }\n            \n        }\n    }\n\n    return stack.length === 0 \n\n\n}\n\nconst isSameType = (stackTop, endingParenType) => {\n    if (stackTop === '(' && endingParenType === ')'){\n        return true\n    }\n    else if (stackTop === '{' && endingParenType === '}'){\n        return true\n    }\n    else if (stackTop === '[' && endingParenType === ']'){\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nconst isClosingParen = (string) => {\n    if (string === ')' || string === '}' || string === ']'){\n        return true\n    }\n\n    return false\n}\n\nconst isOpeningParen = (string) => {\n    if (string === '(' || string === '{' || string === '['){\n        return true\n    }\n\n    return false\n}\n\nexport default isValid\n\n\n"],"mappings":"AACA;AACA;AACA;AAIA,MAAMA,OAAO,GAAIC,MAAD,IAAY;EACxB,IAAIC,KAAK,GAAG,EAAZ;;EAEA,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,MAAM,CAACG,MAAvB,EAA+BD,CAAC,EAAhC,EAAmC;IAE/B,IAAIE,cAAc,CAACJ,MAAM,CAACE,CAAD,CAAP,CAAlB,EAA8B;MAC1BD,KAAK,CAACI,IAAN,CAAWL,MAAM,CAACE,CAAD,CAAjB;MACAI,OAAO,CAACC,GAAR,CAAYN,KAAZ;IACH;;IAED,IAAIO,cAAc,CAACR,MAAM,CAACE,CAAD,CAAP,CAAlB,EAA8B;MAC1B,IAAGO,UAAU,CAACR,KAAK,CAACA,KAAK,CAACE,MAAN,GAAa,CAAd,CAAN,EAAwBH,MAAM,CAACE,CAAD,CAA9B,CAAb,EAAgD;QAC5CD,KAAK,CAACS,GAAN;MACH,CAFD,MAEO;QACHJ,OAAO,CAACC,GAAR,CAAY,eAAZ;QACA,OAAO,KAAP;MACH;IAEJ;EACJ;;EAED,OAAON,KAAK,CAACE,MAAN,KAAiB,CAAxB;AAGH,CAxBD;;AA0BA,MAAMM,UAAU,GAAG,CAACE,QAAD,EAAWC,eAAX,KAA+B;EAC9C,IAAID,QAAQ,KAAK,GAAb,IAAoBC,eAAe,KAAK,GAA5C,EAAgD;IAC5C,OAAO,IAAP;EACH,CAFD,MAGK,IAAID,QAAQ,KAAK,GAAb,IAAoBC,eAAe,KAAK,GAA5C,EAAgD;IACjD,OAAO,IAAP;EACH,CAFI,MAGA,IAAID,QAAQ,KAAK,GAAb,IAAoBC,eAAe,KAAK,GAA5C,EAAgD;IACjD,OAAO,IAAP;EACH,CAFI,MAGA;IACD,OAAO,KAAP;EACH;AACJ,CAbD;;AAgBA,MAAMJ,cAAc,GAAIR,MAAD,IAAY;EAC/B,IAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA7B,IAAoCA,MAAM,KAAK,GAAnD,EAAuD;IACnD,OAAO,IAAP;EACH;;EAED,OAAO,KAAP;AACH,CAND;;AAQA,MAAMI,cAAc,GAAIJ,MAAD,IAAY;EAC/B,IAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA7B,IAAoCA,MAAM,KAAK,GAAnD,EAAuD;IACnD,OAAO,IAAP;EACH;;EAED,OAAO,KAAP;AACH,CAND;;AAQA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}