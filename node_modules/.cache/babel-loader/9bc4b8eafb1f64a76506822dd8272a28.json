{"ast":null,"code":"const isAnagram = (s, t) => {\n  if (s.length !== t.length) {\n    return false;\n  }\n\n  let sletters = {};\n  let pletters = {};\n\n  for (let i = 0; i < s.length; i++) {\n    if (!sletters[s[i]]) {\n      sletters = { ...sletters,\n        [s[i]]: 1\n      };\n    } else {\n      let count = sletters[s[i]];\n      sletters = { ...sletters,\n        [s[i]]: count + 1\n      };\n    }\n  }\n\n  for (let i = 0; i < t.length; i++) {\n    if (!pletters[t[i]]) {\n      pletters = { ...pletters,\n        [t[i]]: 1\n      };\n    } else {\n      let count = pletters[t[i]];\n      pletters = { ...pletters,\n        [t[i]]: count + 1\n      };\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    if (sletters[s[i]] !== pletters[s[i]]) {\n      return false;\n    }\n\n    return true;\n  }\n};\n\nexport default isAnagram;","map":{"version":3,"names":["isAnagram","s","t","length","sletters","pletters","i","count"],"sources":["/Users/kylemonstad/Desktop/dsa/frontend/src/algorithms/validAnagram.js"],"sourcesContent":["\n\nconst isAnagram = (s, t) => {\n    if (s.length !== t.length){\n        return false\n    }\n    \n    let sletters = {}\n    let pletters = {}\n    \n    for (let i=0;i<s.length;i++){\n        \n        if (!sletters[s[i]]){\n            sletters = {\n                ...sletters,\n                [s[i]]: 1\n            }\n        } else {\n            let count = sletters[s[i]]\n            sletters = {\n                ...sletters,\n                [s[i]]: count + 1\n            }\n        }\n    }\n\n    for (let i=0;i<t.length;i++){\n        \n        if (!pletters[t[i]]){\n            pletters = {\n                ...pletters,\n                [t[i]]: 1\n            }\n        } else {\n            let count = pletters[t[i]]\n            pletters = {\n                ...pletters,\n                [t[i]]: count + 1\n            }\n        }\n    }\n\n    for (let i=0;i<s.length;i++){\n        if(sletters[s[i]] !== pletters[s[i]]){\n            return false\n        }\n        return true\n    }\n\n}\n\nexport default isAnagram;"],"mappings":"AAEA,MAAMA,SAAS,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;EACxB,IAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA0B;IACtB,OAAO,KAAP;EACH;;EAED,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,QAAQ,GAAG,EAAf;;EAEA,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACL,CAAC,CAACE,MAAjB,EAAwBG,CAAC,EAAzB,EAA4B;IAExB,IAAI,CAACF,QAAQ,CAACH,CAAC,CAACK,CAAD,CAAF,CAAb,EAAoB;MAChBF,QAAQ,GAAG,EACP,GAAGA,QADI;QAEP,CAACH,CAAC,CAACK,CAAD,CAAF,GAAQ;MAFD,CAAX;IAIH,CALD,MAKO;MACH,IAAIC,KAAK,GAAGH,QAAQ,CAACH,CAAC,CAACK,CAAD,CAAF,CAApB;MACAF,QAAQ,GAAG,EACP,GAAGA,QADI;QAEP,CAACH,CAAC,CAACK,CAAD,CAAF,GAAQC,KAAK,GAAG;MAFT,CAAX;IAIH;EACJ;;EAED,KAAK,IAAID,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACJ,CAAC,CAACC,MAAjB,EAAwBG,CAAC,EAAzB,EAA4B;IAExB,IAAI,CAACD,QAAQ,CAACH,CAAC,CAACI,CAAD,CAAF,CAAb,EAAoB;MAChBD,QAAQ,GAAG,EACP,GAAGA,QADI;QAEP,CAACH,CAAC,CAACI,CAAD,CAAF,GAAQ;MAFD,CAAX;IAIH,CALD,MAKO;MACH,IAAIC,KAAK,GAAGF,QAAQ,CAACH,CAAC,CAACI,CAAD,CAAF,CAApB;MACAD,QAAQ,GAAG,EACP,GAAGA,QADI;QAEP,CAACH,CAAC,CAACI,CAAD,CAAF,GAAQC,KAAK,GAAG;MAFT,CAAX;IAIH;EACJ;;EAED,KAAK,IAAID,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACL,CAAC,CAACE,MAAjB,EAAwBG,CAAC,EAAzB,EAA4B;IACxB,IAAGF,QAAQ,CAACH,CAAC,CAACK,CAAD,CAAF,CAAR,KAAmBD,QAAQ,CAACJ,CAAC,CAACK,CAAD,CAAF,CAA9B,EAAqC;MACjC,OAAO,KAAP;IACH;;IACD,OAAO,IAAP;EACH;AAEJ,CA/CD;;AAiDA,eAAeN,SAAf"},"metadata":{},"sourceType":"module"}